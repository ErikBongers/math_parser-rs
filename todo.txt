* Restructure project
  OLD STRUCTURE
  - Current structure
    - math_parser_rs: BIN project that runs math_parser lib.
      - macros
      - math_parser : LIB
      - wasm: WASMPACK
        - api rust code
        - editor : JS and TS
          - lang-mathparser: different codemirror stuff in one folder
            > codemirror mathparser
            > codemirror resultparser
            > dark theme
            > light theme
            > editor script
              > result decorator
        - www: TS, bundled code, html stuff.
          > images: uploadable
          > pack: uploadable
          > typescript: needs to be generated.
  NEW STRUCTURE
  > www: split from wasm: done.
  > RUST:
    > use workspace?
    >>> SPLIT PROJECTS
      - math_parser : LIB (depencency for main and wasm)
      - macros
      - main: stand-alone project
        - main
        - test
      (- repl?)
      - wasm: extract wasm from web project?
        > where does it generated it's output? Locally? How does WWW get it into the DIST folder? Just copy?

* add all build steps to some file or script.
  > currently there are a lot of build steps in RustRover.
  > make project buildable without RustRover?
  > for npm run -like behaviour:
    > https://github.com/JoshMcguigan/cargo-run-script

    > https://www.reddit.com/r/rust/comments/dw8aqr/build_systems_that_integrate_with_cargo/
      > rust-analyzer uses a custom rust build crate that executes commands.
        > example project and tutorial: https://github.com/matklad/cargo-xtask/
      > nix and carnix

  >> Cargo builds:
  Clean : NOK: uses cargo-clean-recursive
  Run : NOK: cargo run --package math_parser-rs --bin math_parser-rs --features print_nodes
  Run -- release : NOK : cargo run --package math_parser-rs --release --bin math_parser-rs
  Test Parser Lib : NOK : /mathparser/ -> cargo test --workspace
  Test Parser : NOK : / -> cargo test --workspace
  Wasm : NOK : /wasm/ -> wasmpack build --release --target web --out-dir www\pack

  >> CodeMirror parser builds:
  buildmathparser : ok : in /wasm/editor/package.json
  buildresultparser: ok : in /wasm/editor/package.json

  >> Typescript and bundling:
  build Typescript: NOK : /wasm/www/typescript -> tsc parser.ts -t es2018 --outDir ../ ; rm ../result.js
  build Editor : NOK : .../editor : rollup -c

  >> web:
  index.html : NOK : http://localhost:63342/math_parser-rs/wasm/www/index.html
  uploadToGoogle: ok : /wasm/ -> script

* now()-1day --> does this work?

* add % unit?
  > conflict with remainder and modulo?

* units: an si_unit is not necessary!
  > the factor for si is always 1.0
  > there's no reason to know the name of the si_unit.

* add #unit to define custom units
  : #unit euro money 1
  : #unit dollar money 1.5
  > si_unit is always factor 1. So, a si_unit doesn't need to have a name as it is implied.

* define date OUTPUT format.
  > a format string?
  > use the microsoft date formats, as they are more user friendly : https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings
  > and convert them to the rust: https://docs.rs/chrono/latest/chrono/format/strftime/index.html
  > or...allow both? Conflicts? NO, because of the % sign.

* number strings.
  > allow underscores? Currency signs? Minus? Exponential?
  > merge with the normal parse_decimal function?

* post-build
  > install inc_version:
    : cargo install --git https://github.com/ErikBongers/inc_version
    > this installs inc_version.exe in C:\Users\erikb\.cargo\bin
  > check out https://crates.io/crates/cargo-post
  > there is a way to include build tools in a cargo package.
    > look at skia-rust. It automatically loads tools via build.rs, I think.

* Copy TODOs from C++ project.

* implement a ~= operator to approximately compare floats.
  > PI ~= 3.14
  > we don't have if statements, so...not usefull?

* google login: fails more than not.
  > order of scripts?

* Allow a block in the middle of an expression?
  > At least an assign expression?

* Range: replace { start, end } with &str? It's essentially the same and it's safer.
  > byte indexes can probably still be calculated -> see cursor?
  > or implement the same way as SourceIndex?

* rethink echo comments
  > only allowed on a separate line and in between statements!
  > cursor needs to  mark when a newline has begun.
    > only SET this flag, to avoid constant clearing of it.
    > who clears the flag? The tokenizer, when a statement is completed.
  - allow for formatted text
  "the result of a+b = 123.4"
  : !// the result of !`a+b` = $
  > where $ is the last value.
  "the result of a+b = 123.4, and if you subtract .4, you get 123."
  : !// the result of !`a+b` = $, and if you subtract `.4`, you get `$0 - $1`.
  > `a+b` ==> executed and the result is output.
  > !`a+b` ==> executed and the code is output.

* AST
  - trait AstNode to cast: https://github.com/rust-lang/rust-analyzer/blob/337e2abb670d403ae05609c5f1aafcffbd3369a6/crates/syntax/src/ast.rs#L43
  - downcasting a trait object to a specific (exact and original) object : https://stackoverflow.com/questions/33687447/how-to-get-a-reference-to-a-concrete-type-from-a-trait-object?rq=3


* Span to LinePos:
  - https://doc.rust-lang.org/beta/nightly-rustc/src/rustc_span/source_map.rs.html#509
  - lookup_char_pos(BytePos0 -> Loc: https://doc.rust-lang.org/beta/nightly-rustc/src/rustc_span/source_map.rs.html#402
  - >>> lookup_file_pos() https://doc.rust-lang.org/beta/nightly-rustc/src/rustc_span/lib.rs.html#1804
  - count lines and multi byte chars: https://doc.rust-lang.org/beta/nightly-rustc/src/rustc_span/analyze_source_file.rs.html#195



* functions don't check param types: Exception thrown!

* Functions
  > round(), ... on lists?
    > eg make a list all integers.

* assign to complex lhr:
  > When assigning to something more complex that an atomic variable name, how do you parse that?
  : table[index + 1].name.first = 'Steven'
  > https://medium.com/@gvanrossum_83706/peg-parsers-7ed72462f97c
  > look-aheads won't work
  > Python's old pgen parser checked lhr in a 2nd pass. MathParser could do the same in the resolver.
    > accept an arbitrary expression at the left side of an assignment.
  > Python switched to a PEG parser for this.
    > https://medium.com/@gvanrossum_83706/building-a-peg-parser-d4869b5958fb
    > the tokenizer uses an internal vec to store all the parsed tokens so it can quickly be reset to a previous position and go over the already parsed tokens again without having to parse them again. This is memoization.
      > note that this doesn't do 'packrat'-ing yet. The parsed, but rejected, tokens are just in a vec as ordinary tokens, while they could already be stored in a bit of AST.
