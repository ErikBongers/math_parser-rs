* the infinite peek() problem.
  A parser buiilds an AST.
  parse_assignable parses id [ ',' fragment ] and that's a lhs (assignable) expression.
  This is a mini-ast (a node !)




* #pragma: is not restricted to scope (block)

* var.fragment=x; --> gives error: unexpected ';'. Should be "can't assign to..."
* date fragment as hls should give error
    : today.year = 2022; //error!

* PeekingTokenizer copies cursors.
  > But there's only one active cursor (that needs the errors list).
  > Is there a way to move the errors list from active to active cursor without cloning?

* Arithmetic with temperatures is not as straight forward:
  https://reference.wolfram.com/language/tutorial/TemperatureUnits.html#:~:text=When%20adding%20two%20temperature%20quantities,Copy%20to%20clipboard.
  > Note that temp + temp is always converted to kelvin.
    : 3C + 3C = 500K !!!
  > delta temp + delta temp is converted to the first unit.
    : 3dC + 3dC = 6dC
    : 3dC + 3dF = 3dC + (3df)dC = 8.4C
      > or: (((3C.K.-0C.K.)+(3F.K.-0F.K.))+0F.K.)K.F;
      > the 2 delta values are first 'shifted' to 0K, then added, and then 'shifted' back to, in this case, the F scale.
      > consider these deltas as vectors (arrows) in the temperature space, while actual temperatures are 'positions' in the temperature space.

* localstorage per user, when logged in.
  > Otherwise, files for different users will share the same LocalStorage value.

* now()-1day --> does this work?

* add % unit?
  > conflict with remainder and modulo?

* units: an si_unit is not necessary!
  > the factor for si is always 1.0
  > there's no reason to know the name of the si_unit.

* add #unit to define custom units
  : #unit euro money 1
  : #unit dollar money 1.5
  > si_unit is always factor 1. So, a si_unit doesn't need to have a name as it is implied.

* define date OUTPUT format.
  > a format string?
  > use the microsoft date formats, as they are more user friendly : https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings
  > and convert them to the rust: https://docs.rs/chrono/latest/chrono/format/strftime/index.html
  > or...allow both? Conflicts? NO, because of the % sign.

* number strings.
  > allow underscores? Currency signs? Minus? Exponential?
  > merge with the normal parse_decimal function?

* post-build
  > install inc_version:
    : cargo install --git https://github.com/ErikBongers/inc_version
    > this installs inc_version.exe in C:\Users\erikb\.cargo\bin
  > check out https://crates.io/crates/cargo-post
  > there is a way to include build tools in a cargo package.
    > look at skia-rust. It automatically loads tools via build.rs, I think.

* implement a ~= operator to approximately compare floats.
  > PI ~= 3.14
  > we don't have if statements, so...not usefull?

* google login: fails more than not.
  > order of scripts?

* Allow a block in the middle of an expression?
  > At least an assign expression?

* Range: replace { start, end } with &str? It's essentially the same and it's safer.
  > byte indexes can probably still be calculated -> see cursor?
  > or implement the same way as SourceIndex?

* rethink echo comments
  > only allowed on a separate line and in between statements!
  > cursor needs to  mark when a newline has begun.
    > only SET this flag, to avoid constant clearing of it.
    > who clears the flag? The tokenizer, when a statement is completed.
  - allow for formatted text
  "the result of a+b = 123.4"
  : !// the result of !`a+b` = $
  > where $ is the last value.
  "the result of a+b = 123.4, and if you subtract .4, you get 123."
  : !// the result of !`a+b` = $, and if you subtract `.4`, you get `$0 - $1`.
  > `a+b` ==> executed and the result is output.
  > !`a+b` ==> executed and the code is output.

* AST
  - trait AstNode to cast: https://github.com/rust-lang/rust-analyzer/blob/337e2abb670d403ae05609c5f1aafcffbd3369a6/crates/syntax/src/ast.rs#L43
  - downcasting a trait object to a specific (exact and original) object : https://stackoverflow.com/questions/33687447/how-to-get-a-reference-to-a-concrete-type-from-a-trait-object?rq=3


* Span to LinePos:
  - https://doc.rust-lang.org/beta/nightly-rustc/src/rustc_span/source_map.rs.html#509
  - lookup_char_pos(BytePos0 -> Loc: https://doc.rust-lang.org/beta/nightly-rustc/src/rustc_span/source_map.rs.html#402
  - >>> lookup_file_pos() https://doc.rust-lang.org/beta/nightly-rustc/src/rustc_span/lib.rs.html#1804
  - count lines and multi byte chars: https://doc.rust-lang.org/beta/nightly-rustc/src/rustc_span/analyze_source_file.rs.html#195

* Patterns :
    Regex between single quotes.
    ‘g/$1[a-z]+*/’
    “Captures” all variables with matching names in a list.
    How to check.? Names are listed in output?
    ‘B*’  => allow simple patterns?
    Or perhaps even without quotes?
    g/$1[a-z]+*/  => see javascript

* Login
  > If login is cancelled: there’s no button to login anyway. Refresh doesn’t help!

* functions don't check param types: Exception thrown!

* Functions
  > round(), ... on lists?
    > eg make a list all integers.

* assign to complex lhr:
  > When assigning to something more complex that an atomic variable name, how do you parse that?
  : table[index + 1].name.first = 'Steven'
  > https://medium.com/@gvanrossum_83706/peg-parsers-7ed72462f97c
  > look-aheads won't work
  > Python's old pgen parser checked lhr in a 2nd pass. MathParser could do the same in the resolver.
    > accept an arbitrary expression at the left side of an assignment.
  > Python switched to a PEG parser for this.
    > https://medium.com/@gvanrossum_83706/building-a-peg-parser-d4869b5958fb
    > the tokenizer uses an internal vec to store all the parsed tokens so it can quickly be reset to a previous position and go over the already parsed tokens again without having to parse them again. This is memoization.
      > note that this doesn't do 'packrat'-ing yet. The parsed, but rejected, tokens are just in a vec as ordinary tokens, while they could already be stored in a bit of AST.

-----------------------
from C++ todo list:
* Wildchart operations.
  > Atot = a1 + a2 + a3
    : aTot = a# + ...; /numbers only

  > aTot = a... + ...; //any character.
  > aTot = a... +; //second ellipsis optional?

  > or...turn variables into lists.
    : aTot = sum(a#);
    : aTot = (a#).sum;
  > or make a datatype VariableList? That holds the result of a wildcard names find?
    > probably not: if a var with the same pattern is added AFTER the varList is created, it isn't added.
      > or is that no problem?

  Units: can be turned on an off...
  > but what about vars that already use them?
    > duration.days,...

* Implement electronic components notation
  #define eletro OR use formatted values?
  > formatted numbers always work, but when electro is defined, these notations can be used directly.
    > can that principle be aplied to formatted dates and numbers as well?
  > R103 = 10000 Ohm;
  > C472
  > ...?
  > implement as numberic notation like HEX,...
  > RES and CAP
  > only works when activated #define electric
  > add extra units.
  > Resistors have more versions of notations
    R47	    0.47 ohm
    4R7	    4.7 ohm
    470R	470 ohm
    4K7	    4.7 kilohm
    47K	    47 kilohm
    47K3	47.3 kilohm
    470K	470 kilohm
    4M7	    4.7 megohm
  > Resistors also have 3 digit notation
  > require them to always start with an R_ or a C_?
    > this solves the 3 digit problem.
    > only required for 3-digit notaton as the above R-notations are probably non ambiguous.

  > a setting for Tokenizer
  > generalize usage of K and M ?
    > no

* Implement combined units for V, A, R.
  > V * A = Watt !!!
  > Also create units for powers: 24V^2

* use modulo operator for hours and date calculations = less checking to do than with remainder!
  > Duration::normalize()

* Adding complex units:
    A.=m/s
    Or
    A.=(m/s)
    Or
    A.=[m/s]
    Or
    A.=(.m/.s) -> easier to program, but less intuitive.

* Custom units:
    snoep=3"gummies";
    snoep += 5gummies;
    snoep*3;

* add an ECHO statement (or function?).
  > perhaps use the !-notation?
  > It's not part of a calculation, so it's a statement.
  > allow formatting or value embedding?
  > no use of quotes needed?
  > newline, how?
  : ! this line contains a {number}
  : ! the previous line is $ and the result is _
  : ! line 3 contains this statement: #3 and it's value is #3_
  : ! line 3 contains this statement: #3 and it's value is #3_

* Examine the Scope object. This should contain the full environment (and parser?) for every scope level. Should Parser and Interpreter be stateless? Probably yes.

* make date() more robust. quick-and-dirty currently.
  > test types of arguments.
    > also units
  > return proper error messages.
  > take into account the current date format.
    > current dateformat: put in scope?
       > and use it in the date() function.

* Date: operator + and - : make generic
  > Adding a duration may contain negative values in the duration!
  > Fix this for the +operator
  > the -operator is just the +operator with all duration values made negative.
  > Durations allow calculations and max(), floor(),…
    > Floor is template: floor<Sec>(duration);

WWW
---
Nice to have
---------------
* units :
  > mathlab not compact enough:
    https://nl.mathworks.com/help/symbolic/units-of-measurement-tutorial.html
  > complex units.
    > if you set a unit to a var BEFORE an equation:
      > when the eq is assigned to the var, a warning should be generated if the unit changes. (this allows for checking the physical dimension of your eq.)
  > custom units
    : basket = 10"apples";
    : sack = 20"pears";
    : basket+sack; //warning: units don't match
* dates:
  > half a minute?
    > 1min.sec/2 => 30sec
    > imin/2 => omin !!!

  > conversions:
    - UTC
    - GPS
    -...
* Implicit variable:
    Implicit var _ always contains the last result (being the result of the previous statement)
    10+20+30;
    +40: //add to the result of the previous line.
    But what if:
    A=10;
    +20;//add this to A or only to implicit var or error? -> no error. Add to Implicit result.
    B=50;
    +=30; //add to var of previous line.
    +=40;// continue adding…

    C=_; //underscore is implicit var. Assign last value to C, which is B in this case;
    70;
    D=_;//D = 70

* resolve equations
* Variable ranges and wildcards
    Sum(a..z) : // sum all vars a to z
    Sum(a*); sum all vars that start with a; -> ambiguous syntax
    Sum([a*]);
    Ranges: always use [] ?
    Allow both (a..z) and ([a..z])

* simplify
* Latex visualisation

Vectors
----------
* ||x|| is the normalized vector.
  > If x = (x1, x2, x3) then ||x|| = (x1^2 + x2^2 + x3^2)^(1/2)


Extra operators
---------------
https://www.statmethods.net/management/operators.html
